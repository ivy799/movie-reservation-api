generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        String       @default("cmfaribo40000d954y5uqt0xa")
  accounts      Account[]
  sessions      Session[]

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Role {
  id    String     @id @default(cuid())
  role  String?
  users User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id          String @id @default(cuid())
  title       String
  description String
  image       String
  genreId     String
  showtimes   Int

  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
}

model Genre {
  id    String  @id @default(cuid())
  name  String
  movie Movie[]
}
